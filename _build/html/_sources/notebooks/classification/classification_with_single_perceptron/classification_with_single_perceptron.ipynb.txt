{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "da5d3888-2b16-48b6-bf32-5cd542a0b018",
   "metadata": {
    "id": "XI8PBrk_2Z4V",
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "# Simple Binary Classification with Sigmoid Activation\n",
    "## Packages\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b551b722-c3bc-4703-b6ca-9c873ee4bfb9",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import colors\n",
    "# A function to create a dataset.\n",
    "from sklearn.datasets import make_blobs \n",
    "\n",
    "# Output of plotting commands is displayed inline within the Jupyter notebook.\n",
    "%matplotlib inline \n",
    "\n",
    "# Set a seed so that the results are consistent.\n",
    "np.random.seed(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc5cbfb8-6bee-4a35-93ed-85025b9080f6",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "<a name='1'></a>\n",
    "## 1 - Single Perceptron Neural Network with Activation Function\n",
    "\n",
    "You already have constructed and trained a neural network model with one **perceptron**. Here a similar model can be used, but with an activation function. Then a single perceptron basically works as a threshold function."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb1651fd-10e1-47fe-8b06-e94bc1d15998",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "<a name='1.1'></a>\n",
    "### 1.1 - Neural Network Structure"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36c8d14e-6ba3-4391-88ab-b9213a6605bc",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "The neural network components are shown in the following scheme:\n",
    "\n",
    "<!-- ![Neural Network Structure](images/nn_model_classification_1_layer.png){width=600px} -->\n",
    "```{figure} images/nn_model_classification_1_layer.png\n",
    ":width: 600px\n",
    ":name: nn_model_classification_1_layer\n",
    "Neural Network Structure\n",
    "```\n",
    "\n",
    "Similarly to the previous lab, the input layer contains two nodes $x_1$ and $x_2$. Weight vector $W = \\begin{bmatrix} w_1 & w_2\\end{bmatrix}$ and bias ($b$) are the parameters to be updated during the model training. First step in the forward propagation is the same as in the previous lab. For every training example $x^{(i)} = \\begin{bmatrix} x_1^{(i)} & x_2^{(i)}\\end{bmatrix}$:\n",
    "\n",
    "$$\n",
    "z^{(i)} = w_1x_1^{(i)} + w_2x_2^{(i)} + b = Wx^{(i)} + b.\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a03acf60-adbc-4792-9fb3-f27081b5626a",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "But now you cannot take a real number $z^{(i)}$ into the output as you need to perform classification. It could be done with a discrete approach: compare the result with zero, and classify as $0$ (blue) if it is below zero and $1$ (red) if it is above zero. Then define cost function as a percentage of incorrectly identified classes and perform backward propagation.\n",
    "\n",
    "This extra step in the forward propagation is actually an application of an **activation function**. It would be possible to implement the discrete approach described above (with unit step function) for this problem, but it turns out that there is a continuous approach that works better and is commonly used in more complicated neural networks. So you will implement it here: single perceptron with sigmoid activation function."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1800098-ea31-40d5-9e40-d30f46dd35b4",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "Sigmoid activation function is defined as\n",
    "\n",
    "$$\n",
    "a = \\sigma\\left(z\\right) = \\frac{1}{1+e^{-z}}.\n",
    "\\tag{2}\n",
    "$$\n",
    "\n",
    "Then a threshold value of $0.5$ can be used for predictions: $1$ (red) if  $a > 0.5$ and $0$ (blue) otherwise. Putting it all together, mathematically the single perceptron neural network with sigmoid activation function can be expressed as:\n",
    "\n",
    "$$\n",
    "z^{(i)} =  W x^{(i)} + b\n",
    "$$\n",
    "$$\n",
    "a^{(i)} = \\sigma\\left(z^{(i)}\\right). \\tag{3}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d8c9aba-0db6-4bb1-9a3a-22c2696d8aeb",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "If you have $m$ training examples organised in the columns of ($2 \\times m$) matrix $X$, you can apply the activation function element-wise. So the model can be written as:\n",
    "\n",
    "$$\n",
    "Z =  W X + b\n",
    "$$\n",
    "$$\n",
    "A = \\sigma\\left(Z\\right), \\tag{4}\n",
    "$$\n",
    "\n",
    "where $b$ is broadcasted to the vector of a size ($1 \\times m$). \n",
    "\n",
    "When dealing with classification problems, the most commonly used cost function is the **log loss**, which is described by the following equation:\n",
    "\n",
    "$$\n",
    "\\mathcal{L}\\left(W, b\\right) = \\frac{1}{m}\\sum_{i=1}^{m} L\\left(W, b\\right) = \\frac{1}{m}\\sum_{i=1}^{m}  \\large\\left(\\small -y^{(i)}\\log\\left(a^{(i)}\\right) - (1-y^{(i)})\\log\\left(1- a^{(i)}\\right)  \\large  \\right) \\small, \\tag{5}\n",
    "$$\n",
    "\n",
    "where $y^{(i)} \\in \\{0,1\\}$ are the original labels and $a^{(i)}$ are the continuous output values of the forward propagation step (elements of array $A$)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf9cc9b5-c110-418f-826e-07027a56cc54",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "You want to minimize the cost function during the training. To implement gradient descent, calculate partial derivatives using chain rule:\n",
    "\n",
    "$$\n",
    "\\frac{\\partial \\mathcal{L} }{ \\partial w_1 } = \n",
    "\\frac{1}{m}\\sum_{i=1}^{m} \\frac{\\partial L }{ \\partial a^{(i)}}\n",
    "\\frac{\\partial a^{(i)} }{ \\partial z^{(i)}}\\frac{\\partial z^{(i)} }{ \\partial w_1}\n",
    "$$\n",
    "$$\n",
    "\\frac{\\partial \\mathcal{L} }{ \\partial w_2 } = \n",
    "\\frac{1}{m}\\sum_{i=1}^{m} \\frac{\\partial L }{ \\partial a^{(i)}}\n",
    "\\frac{\\partial a^{(i)} }{ \\partial z^{(i)}}\\frac{\\partial z^{(i)} }{ \\partial w_2}, \\tag{6}\n",
    "$$\n",
    "$$\n",
    "\\frac{\\partial \\mathcal{L} }{ \\partial b } = \n",
    "\\frac{1}{m}\\sum_{i=1}^{m} \\frac{\\partial L }{ \\partial a^{(i)}}\n",
    "\\frac{\\partial a^{(i)} }{ \\partial z^{(i)}}\\frac{\\partial z^{(i)} }{ \\partial b}.\n",
    "$$\n",
    "\n",
    "As discussed in the videos, $\\frac{\\partial L }{ \\partial a^{(i)}}\n",
    "\\frac{\\partial a^{(i)} }{ \\partial z^{(i)}} = \\left(a^{(i)} - y^{(i)}\\right)$, $\\frac{\\partial z^{(i)}}{ \\partial w_1} = x_1^{(i)}$, $\\frac{\\partial z^{(i)}}{ \\partial w_2} = x_2^{(i)}$ and $\\frac{\\partial z^{(i)}}{ \\partial b} = 1$. Then $(6)$ can be rewritten as:\n",
    "\n",
    "$$\n",
    "\\frac{\\partial \\mathcal{L} }{ \\partial w_1 } = \n",
    "\\frac{1}{m}\\sum_{i=1}^{m} \\left(a^{(i)} - y^{(i)}\\right)x_1^{(i)}\n",
    "$$\n",
    "$$\n",
    "\\frac{\\partial \\mathcal{L} }{ \\partial w_2 } = \n",
    "\\frac{1}{m}\\sum_{i=1}^{m} \\left(a^{(i)} - y^{(i)}\\right)x_2^{(i)}, \\tag{7}\n",
    "$$\n",
    "$$\n",
    "\\frac{\\partial \\mathcal{L} }{ \\partial b } = \n",
    "\\frac{1}{m}\\sum_{i=1}^{m} \\left(a^{(i)} - y^{(i)}\\right).\n",
    "$$\n",
    "\n",
    "Note that the obtained expressions $(7)$ are exactly the same as in the section $3.2$ of the previous lab, when multiple linear regression model was discussed. Thus, they can be rewritten in a matrix form:\n",
    "\n",
    "$$\n",
    "\\frac{\\partial \\mathcal{L} }{ \\partial W } = \n",
    "\\begin{bmatrix} \\frac{\\partial \\mathcal{L} }{ \\partial w_1 } & \n",
    "\\frac{\\partial \\mathcal{L} }{ \\partial w_2 }\\end{bmatrix} = \\frac{1}{m}\\left(A - Y\\right)X^T\n",
    "$$\n",
    "$$\n",
    "\\frac{\\partial \\mathcal{L} }{ \\partial b } = \\frac{1}{m}\\left(A - Y\\right)\\mathbf{1}. \\tag{8}\n",
    "$$\n",
    "\n",
    "where $\\left(A - Y\\right)$ is an array of a shape ($1 \\times m$), $X^T$ is an array of a shape ($m \\times 2$) and $\\mathbf{1}$ is just a ($m \\times 1$) vector of ones.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24cbd507-da43-418c-ad74-d0dc9032f098",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "Then you can update the parameters:\n",
    "\n",
    "$$\n",
    "W = W - \\alpha \\frac{\\partial \\mathcal{L} }{ \\partial W }\n",
    "$$\n",
    "$$\n",
    "b = b - \\alpha \\frac{\\partial \\mathcal{L} }{ \\partial b }, \\tag{9}\n",
    "$$\n",
    "\n",
    "where $\\alpha$ is the learning rate. Repeat the process in a loop until the cost function stops decreasing."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a003968-3878-4d77-ac55-f28ac7f466d9",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "Finally, the predictions for some example $x$ can be made taking the output $a$ and calculating $\\hat{y}$ as"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1e49faf-9d00-4c01-9549-d0980366bb2c",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "$$\n",
    "\\hat{y} = \n",
    "\\begin{cases}\n",
    "1, & \\text{if } a \\ge 0.5 \\\\\n",
    "0, & \\text{otherwise}\n",
    "\\end{cases}\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\tag{10}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "483f5e10-3d44-471d-98a7-75707105329b",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "<a name='1.2'></a>\n",
    "### - Dataset\n",
    "\n",
    "Let's get the dataset you will work on. The following code will create $m=30$ data points $(x_1, x_2)$, where $x_1, x_2 \\in \\{0,1\\}$ and save them in the `NumPy` array `X` of a shape $(2 \\times m)$ (in the columns of the array). The labels ($0$: blue, $1$: red) will be calculated so that $y = 1$ if $x_1 = 0$ and $x_2 = 1$, in the rest of the cases $y=0$. The labels will be saved in the array `Y` of a shape $(1 \\times m)$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "05ce1ee9-0338-4347-9806-c37ad158f1c0",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training dataset X containing (x1, x2) coordinates in the columns:\n",
      "[[0 0 1 1 0 0 0 1 1 1 0 1 1 1 0 1 1 0 0 0 0 1 1 0 0 0 1 0 0 0]\n",
      " [0 1 0 1 1 0 1 0 0 1 1 0 0 1 0 1 0 1 1 1 1 0 1 0 0 1 1 1 0 0]]\n",
      "Training dataset Y containing labels of two classes (0: blue, 1: red)\n",
      "[[0 1 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0 1 0 0]]\n",
      "The shape of X is: (2, 30)\n",
      "The shape of Y is: (1, 30)\n",
      "I have m = 30 training examples!\n"
     ]
    }
   ],
   "source": [
    "m = 30\n",
    "\n",
    "X = np.random.randint(0, 2, (2, m))\n",
    "Y = np.logical_and(X[0] == 0, X[1] == 1).astype(int).reshape((1, m))\n",
    "\n",
    "print('Training dataset X containing (x1, x2) coordinates in the columns:')\n",
    "print(X)\n",
    "print('Training dataset Y containing labels of two classes (0: blue, 1: red)')\n",
    "print(Y)\n",
    "\n",
    "print ('The shape of X is: ' + str(X.shape))\n",
    "print ('The shape of Y is: ' + str(Y.shape))\n",
    "print ('I have m = %d training examples!' % (X.shape[1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b6b9d81-5c90-4dfe-b68b-e7ae26ad9eb0",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "<a name='1.3'></a>\n",
    "### - Define Activation Function\n",
    "\n",
    "The sigmoid function $(2)$ for a variable $z$ can be defined with the following code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9cb09205-46a3-43ec-a0ab-3eea77b597d7",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sigmoid(-2) = 0.11920292202211755\n",
      "sigmoid(0) = 0.5\n",
      "sigmoid(3.5) = 0.9706877692486436\n"
     ]
    }
   ],
   "source": [
    "def sigmoid(z):\n",
    "    return 1/(1 + np.exp(-z))\n",
    "    \n",
    "print(\"sigmoid(-2) = \" + str(sigmoid(-2)))\n",
    "print(\"sigmoid(0) = \" + str(sigmoid(0)))\n",
    "print(\"sigmoid(3.5) = \" + str(sigmoid(3.5)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca616b5e-e341-4416-8422-e6e31eff68bc",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "It can be applied to a `NumPy` array element by element:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "241b4744-be88-41ca-a45d-449d3091a06f",
   "metadata": {
    "tags": [
     "graded",
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.11920292 0.5        0.97068777]\n"
     ]
    }
   ],
   "source": [
    "print(sigmoid(np.array([-2, 0, 3.5])))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2b7c0af-a7bc-4b9d-8e23-9803fd5feb99",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "<a name='2'></a>\n",
    "## 2 - Implementation of the Neural Network Model\n",
    "\n",
    "Implementation of the described neural network will be very similar to the `regression_with_single_perceptron` lab. The differences will be only in the functions `forward_propagation` and `compute_cost`!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "03b8b4ec-95a1-4ea5-b320-45c22f19a035",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The size of the input layer is: n_x = 2\n",
      "The size of the output layer is: n_y = 1\n"
     ]
    }
   ],
   "source": [
    "def layer_sizes(X, Y):\n",
    "    \"\"\"\n",
    "    Arguments:\n",
    "    X -- input dataset of shape (input size, number of examples)\n",
    "    Y -- labels of shape (output size, number of examples)\n",
    "    \n",
    "    Returns:\n",
    "    n_x -- the size of the input layer\n",
    "    n_y -- the size of the output layer\n",
    "    \"\"\"\n",
    "    n_x = X.shape[0]\n",
    "    n_y = Y.shape[0]\n",
    "    \n",
    "    return (n_x, n_y)\n",
    "\n",
    "(n_x, n_y) = layer_sizes(X, Y)\n",
    "print(\"The size of the input layer is: n_x = \" + str(n_x))\n",
    "print(\"The size of the output layer is: n_y = \" + str(n_y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3956dffe-e234-4530-8c83-d7fd9ef47e78",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "W = [[-0.00768836 -0.00230031]]\n",
      "b = [[0.]]\n"
     ]
    }
   ],
   "source": [
    "def initialize_parameters(n_x, n_y):\n",
    "    \"\"\"\n",
    "    Returns:\n",
    "    params -- python dictionary containing your parameters:\n",
    "                    W -- weight matrix of shape (n_y, n_x)\n",
    "                    b -- bias value set as a vector of shape (n_y, 1)\n",
    "    \"\"\"\n",
    "    \n",
    "    W = np.random.randn(n_y, n_x) * 0.01\n",
    "    b = np.zeros((n_y, 1))\n",
    "\n",
    "    parameters = {\"W\": W,\n",
    "                  \"b\": b}\n",
    "    \n",
    "    return parameters\n",
    "\n",
    "parameters = initialize_parameters(n_x, n_y)\n",
    "print(\"W = \" + str(parameters[\"W\"]))\n",
    "print(\"b = \" + str(parameters[\"b\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2215e8f-ba81-43b8-a3f5-3400fea8785a",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "Implement `forward_propagation()` following the equation $(4)$:\n",
    "$$\n",
    "Z =  W X + b\n",
    "$$\n",
    "$$\n",
    "A = \\sigma\\left(Z\\right).\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "37a2e2cc-b0f3-4414-ac0c-337ab31ac42a",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Output vector A: [[0.5        0.49942492 0.49807792 0.49750285 0.49942492 0.5\n",
      "  0.49942492 0.49807792 0.49807792 0.49750285 0.49942492 0.49807792\n",
      "  0.49807792 0.49750285 0.5        0.49750285 0.49807792 0.49942492\n",
      "  0.49942492 0.49942492 0.49942492 0.49807792 0.49750285 0.5\n",
      "  0.5        0.49942492 0.49750285 0.49942492 0.5        0.5       ]]\n"
     ]
    }
   ],
   "source": [
    "def forward_propagation(X, parameters):\n",
    "    \"\"\"\n",
    "    Argument:\n",
    "    X -- input data of size (n_x, m)\n",
    "    parameters -- python dictionary containing your parameters (output of initialization function)\n",
    "    \n",
    "    Returns:\n",
    "    A -- The output\n",
    "    \"\"\"\n",
    "    W = parameters[\"W\"]\n",
    "    b = parameters[\"b\"]\n",
    "    \n",
    "    # Forward Propagation to calculate Z.\n",
    "    Z = W @ X + b\n",
    "    A = sigmoid(Z)\n",
    "\n",
    "    return A\n",
    "\n",
    "A = forward_propagation(X, parameters)\n",
    "\n",
    "print(\"Output vector A:\", A)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34d1941b-d94d-48ea-8be6-44f0f5646f76",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "Your weights were just initialized with some random values, so the model has not been trained yet. \n",
    "\n",
    "Define a cost function $(5)$ which will be used to train the model:\n",
    "\n",
    "$$\n",
    "\\mathcal{L}\\left(W, b\\right)  = \\frac{1}{m}\\sum_{i=1}^{m}  \\large\\left(\\small -y^{(i)}\\log\\left(a^{(i)}\\right) - (1-y^{(i)})\\log\\left(1- a^{(i)}\\right)  \\large  \\right) \\small. \\tag{5}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d99d4e18-eed7-49e9-baca-0252b911786e",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cost = 0.6916391611507908\n"
     ]
    }
   ],
   "source": [
    "def compute_cost(A, Y):\n",
    "    \"\"\"\n",
    "    Computes the log loss cost function\n",
    "    \n",
    "    Arguments:\n",
    "    A -- The output of the neural network of shape (n_y, number of examples)\n",
    "    Y -- \"true\" labels vector of shape (n_y, number of examples)\n",
    "    \n",
    "    Returns:\n",
    "    cost -- log loss\n",
    "    \n",
    "    \"\"\"\n",
    "    # Number of examples.\n",
    "    m = Y.shape[1]\n",
    "\n",
    "    # Compute the cost function.\n",
    "    logprobs = - (Y * np.log(A)) - (1 - Y) * np.log(1 - A)\n",
    "    cost = 1/m * np.sum(logprobs)\n",
    "    \n",
    "    return cost\n",
    "\n",
    "print(\"cost = \" + str(compute_cost(A, Y)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63000f4f-ee85-4197-ac0c-784fe15a76b6",
   "metadata": {
    "tags": [
     "graded",
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "Calculate partial derivatives as shown in $(8)$:\n",
    "\n",
    "$$\n",
    "\\frac{\\partial \\mathcal{L} }{ \\partial W } = \\frac{1}{m}\\left(A - Y\\right)X^T\n",
    "$$\n",
    "$$\n",
    "\\frac{\\partial \\mathcal{L} }{ \\partial b } = \\frac{1}{m}\\left(A - Y\\right)\\mathbf{1}.\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "68996626-6fda-491b-83c9-7d2fd9b3024d",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dW = [[ 0.21571875 -0.06735779]]\n",
      "db = [[0.16552706]]\n"
     ]
    }
   ],
   "source": [
    "def backward_propagation(A, X, Y):\n",
    "    \"\"\"\n",
    "    Implements the backward propagation, calculating gradients\n",
    "    \n",
    "    Arguments:\n",
    "    A -- the output of the neural network of shape (n_y, number of examples)\n",
    "    X -- input data of shape (n_x, number of examples)\n",
    "    Y -- \"true\" labels vector of shape (n_y, number of examples)\n",
    "    \n",
    "    Returns:\n",
    "    grads -- python dictionary containing gradients with respect to different parameters\n",
    "    \"\"\"\n",
    "    m = X.shape[1]\n",
    "    \n",
    "    # Backward propagation: calculate partial derivatives denoted as dW, db for simplicity. \n",
    "    dZ = A - Y\n",
    "    dW = 1/m * (dZ @ X.T)\n",
    "    db = 1/m * np.sum(dZ, axis = 1, keepdims = True)\n",
    "    \n",
    "    grads = {\"dW\": dW,\n",
    "             \"db\": db}\n",
    "    \n",
    "    return grads\n",
    "\n",
    "grads = backward_propagation(A, X, Y)\n",
    "\n",
    "print(\"dW = \" + str(grads[\"dW\"]))\n",
    "print(\"db = \" + str(grads[\"db\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b25194a6-5bd5-49f6-918a-15f70829fd66",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "Update parameters as shown in $(9)$:\n",
    "\n",
    "$$\n",
    "W = W - \\alpha \\frac{\\partial \\mathcal{L} }{ \\partial W }\n",
    "$$\n",
    "\n",
    "$$\n",
    "b = b - \\alpha \\frac{\\partial \\mathcal{L} }{ \\partial b }.\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9eb9adad-2d81-46ca-85b4-4fa82c643d04",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "W updated = [[-0.26655087  0.07852904]]\n",
      "b updated = [[-0.19863247]]\n"
     ]
    }
   ],
   "source": [
    "def update_parameters(parameters, grads, learning_rate=1.2):\n",
    "    \"\"\"\n",
    "    Updates parameters using the gradient descent update rule\n",
    "    \n",
    "    Arguments:\n",
    "    parameters -- python dictionary containing parameters \n",
    "    grads -- python dictionary containing gradients \n",
    "    learning_rate -- learning rate parameter for gradient descent\n",
    "    \n",
    "    Returns:\n",
    "    parameters -- python dictionary containing updated parameters \n",
    "    \"\"\"\n",
    "    # Retrieve each parameter from the dictionary \"parameters\".\n",
    "    W = parameters[\"W\"]\n",
    "    b = parameters[\"b\"]\n",
    "    \n",
    "    # Retrieve each gradient from the dictionary \"grads\".\n",
    "    dW = grads[\"dW\"]\n",
    "    db = grads[\"db\"]\n",
    "    \n",
    "    # Update rule for each parameter.\n",
    "    W = W - learning_rate * dW\n",
    "    b = b - learning_rate * db\n",
    "    \n",
    "    parameters = {\"W\": W,\n",
    "                  \"b\": b}\n",
    "    \n",
    "    return parameters\n",
    "\n",
    "parameters_updated = update_parameters(parameters, grads)\n",
    "\n",
    "print(\"W updated = \" + str(parameters_updated[\"W\"]))\n",
    "print(\"b updated = \" + str(parameters_updated[\"b\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37960e9d-ba5a-494a-8c37-0e3ab50d1ec0",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "Build your neural network model in `nn_model()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dca38839-0392-42dc-93fe-20a8c546a359",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [],
   "source": [
    "def nn_model(X, Y, num_iterations=10, learning_rate=1.2, print_cost=False):\n",
    "    \"\"\"\n",
    "    Arguments:\n",
    "    X -- dataset of shape (n_x, number of examples)\n",
    "    Y -- labels of shape (n_y, number of examples)\n",
    "    num_iterations -- number of iterations in the loop\n",
    "    learning_rate -- learning rate parameter for gradient descent\n",
    "    print_cost -- if True, print the cost every iteration\n",
    "    \n",
    "    Returns:\n",
    "    parameters -- parameters learnt by the model. They can then be used to make predictions.\n",
    "    \"\"\"\n",
    "    \n",
    "    n_x = layer_sizes(X, Y)[0]\n",
    "    n_y = layer_sizes(X, Y)[1]\n",
    "    \n",
    "    parameters = initialize_parameters(n_x, n_y)\n",
    "    \n",
    "    # Loop\n",
    "    for i in range(0, num_iterations):\n",
    "         \n",
    "        # Forward propagation. Inputs: \"X, parameters\". Outputs: \"A\".\n",
    "        A = forward_propagation(X, parameters)\n",
    "        \n",
    "        # Cost function. Inputs: \"A, Y\". Outputs: \"cost\".\n",
    "        cost = compute_cost(A, Y)\n",
    "        \n",
    "        # Backpropagation. Inputs: \"A, X, Y\". Outputs: \"grads\".\n",
    "        grads = backward_propagation(A, X, Y)\n",
    "    \n",
    "        # Gradient descent parameter update. Inputs: \"parameters, grads, learning_rate\". Outputs: \"parameters\".\n",
    "        parameters = update_parameters(parameters, grads, learning_rate)\n",
    "        \n",
    "        # Print the cost every iteration.\n",
    "        if print_cost:\n",
    "            print (\"Cost after iteration %i: %f\" %(i, cost))\n",
    "\n",
    "    return parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "54bdba6e-c058-4561-9930-d160450ba18a",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost after iteration 0: 0.693480\n",
      "Cost after iteration 1: 0.608586\n",
      "Cost after iteration 2: 0.554475\n",
      "Cost after iteration 3: 0.513124\n",
      "Cost after iteration 4: 0.478828\n",
      "Cost after iteration 5: 0.449395\n",
      "Cost after iteration 6: 0.423719\n",
      "Cost after iteration 7: 0.401089\n",
      "Cost after iteration 8: 0.380986\n",
      "Cost after iteration 9: 0.363002\n",
      "Cost after iteration 10: 0.346813\n",
      "Cost after iteration 11: 0.332152\n",
      "Cost after iteration 12: 0.318805\n",
      "Cost after iteration 13: 0.306594\n",
      "Cost after iteration 14: 0.295369\n",
      "Cost after iteration 15: 0.285010\n",
      "Cost after iteration 16: 0.275412\n",
      "Cost after iteration 17: 0.266489\n",
      "Cost after iteration 18: 0.258167\n",
      "Cost after iteration 19: 0.250382\n",
      "Cost after iteration 20: 0.243080\n",
      "Cost after iteration 21: 0.236215\n",
      "Cost after iteration 22: 0.229745\n",
      "Cost after iteration 23: 0.223634\n",
      "Cost after iteration 24: 0.217853\n",
      "Cost after iteration 25: 0.212372\n",
      "Cost after iteration 26: 0.207168\n",
      "Cost after iteration 27: 0.202219\n",
      "Cost after iteration 28: 0.197505\n",
      "Cost after iteration 29: 0.193009\n",
      "Cost after iteration 30: 0.188716\n",
      "Cost after iteration 31: 0.184611\n",
      "Cost after iteration 32: 0.180682\n",
      "Cost after iteration 33: 0.176917\n",
      "Cost after iteration 34: 0.173306\n",
      "Cost after iteration 35: 0.169839\n",
      "Cost after iteration 36: 0.166507\n",
      "Cost after iteration 37: 0.163303\n",
      "Cost after iteration 38: 0.160218\n",
      "Cost after iteration 39: 0.157246\n",
      "Cost after iteration 40: 0.154382\n",
      "Cost after iteration 41: 0.151618\n",
      "Cost after iteration 42: 0.148950\n",
      "Cost after iteration 43: 0.146373\n",
      "Cost after iteration 44: 0.143881\n",
      "Cost after iteration 45: 0.141471\n",
      "Cost after iteration 46: 0.139139\n",
      "Cost after iteration 47: 0.136881\n",
      "Cost after iteration 48: 0.134694\n",
      "Cost after iteration 49: 0.132574\n",
      "Cost after iteration 50: 0.130517\n",
      "Cost after iteration 51: 0.128522\n",
      "Cost after iteration 52: 0.126586\n",
      "Cost after iteration 53: 0.124705\n",
      "Cost after iteration 54: 0.122878\n",
      "Cost after iteration 55: 0.121102\n",
      "Cost after iteration 56: 0.119375\n",
      "Cost after iteration 57: 0.117696\n",
      "Cost after iteration 58: 0.116062\n",
      "Cost after iteration 59: 0.114471\n",
      "Cost after iteration 60: 0.112922\n",
      "Cost after iteration 61: 0.111413\n",
      "Cost after iteration 62: 0.109942\n",
      "Cost after iteration 63: 0.108509\n",
      "Cost after iteration 64: 0.107111\n",
      "Cost after iteration 65: 0.105748\n",
      "Cost after iteration 66: 0.104418\n",
      "Cost after iteration 67: 0.103120\n",
      "Cost after iteration 68: 0.101853\n",
      "Cost after iteration 69: 0.100616\n",
      "Cost after iteration 70: 0.099407\n",
      "Cost after iteration 71: 0.098227\n",
      "Cost after iteration 72: 0.097073\n",
      "Cost after iteration 73: 0.095945\n",
      "Cost after iteration 74: 0.094842\n",
      "Cost after iteration 75: 0.093763\n",
      "Cost after iteration 76: 0.092708\n",
      "Cost after iteration 77: 0.091675\n",
      "Cost after iteration 78: 0.090665\n",
      "Cost after iteration 79: 0.089676\n",
      "Cost after iteration 80: 0.088707\n",
      "Cost after iteration 81: 0.087759\n",
      "Cost after iteration 82: 0.086830\n",
      "Cost after iteration 83: 0.085920\n",
      "Cost after iteration 84: 0.085028\n",
      "Cost after iteration 85: 0.084154\n",
      "Cost after iteration 86: 0.083297\n",
      "Cost after iteration 87: 0.082457\n",
      "Cost after iteration 88: 0.081633\n",
      "Cost after iteration 89: 0.080824\n",
      "Cost after iteration 90: 0.080032\n",
      "Cost after iteration 91: 0.079254\n",
      "Cost after iteration 92: 0.078490\n",
      "Cost after iteration 93: 0.077741\n",
      "Cost after iteration 94: 0.077005\n",
      "Cost after iteration 95: 0.076283\n",
      "Cost after iteration 96: 0.075574\n",
      "Cost after iteration 97: 0.074877\n",
      "Cost after iteration 98: 0.074193\n",
      "Cost after iteration 99: 0.073521\n",
      "Cost after iteration 100: 0.072860\n",
      "Cost after iteration 101: 0.072211\n",
      "Cost after iteration 102: 0.071573\n",
      "Cost after iteration 103: 0.070946\n",
      "Cost after iteration 104: 0.070330\n",
      "Cost after iteration 105: 0.069723\n",
      "Cost after iteration 106: 0.069127\n",
      "Cost after iteration 107: 0.068541\n",
      "Cost after iteration 108: 0.067964\n",
      "Cost after iteration 109: 0.067396\n",
      "Cost after iteration 110: 0.066838\n",
      "Cost after iteration 111: 0.066288\n",
      "Cost after iteration 112: 0.065748\n",
      "Cost after iteration 113: 0.065215\n",
      "Cost after iteration 114: 0.064691\n",
      "Cost after iteration 115: 0.064175\n",
      "Cost after iteration 116: 0.063667\n",
      "Cost after iteration 117: 0.063167\n",
      "Cost after iteration 118: 0.062675\n",
      "Cost after iteration 119: 0.062189\n",
      "Cost after iteration 120: 0.061711\n",
      "Cost after iteration 121: 0.061240\n",
      "Cost after iteration 122: 0.060777\n",
      "Cost after iteration 123: 0.060319\n",
      "Cost after iteration 124: 0.059869\n",
      "Cost after iteration 125: 0.059425\n",
      "Cost after iteration 126: 0.058987\n",
      "Cost after iteration 127: 0.058556\n",
      "Cost after iteration 128: 0.058130\n",
      "Cost after iteration 129: 0.057711\n",
      "Cost after iteration 130: 0.057297\n",
      "Cost after iteration 131: 0.056889\n",
      "Cost after iteration 132: 0.056487\n",
      "Cost after iteration 133: 0.056091\n",
      "Cost after iteration 134: 0.055699\n",
      "Cost after iteration 135: 0.055313\n",
      "Cost after iteration 136: 0.054932\n",
      "Cost after iteration 137: 0.054556\n",
      "Cost after iteration 138: 0.054186\n",
      "Cost after iteration 139: 0.053820\n",
      "Cost after iteration 140: 0.053458\n",
      "Cost after iteration 141: 0.053102\n",
      "Cost after iteration 142: 0.052750\n",
      "Cost after iteration 143: 0.052403\n",
      "Cost after iteration 144: 0.052060\n",
      "Cost after iteration 145: 0.051721\n",
      "Cost after iteration 146: 0.051387\n",
      "Cost after iteration 147: 0.051057\n",
      "Cost after iteration 148: 0.050731\n",
      "Cost after iteration 149: 0.050409\n",
      "Cost after iteration 150: 0.050091\n",
      "Cost after iteration 151: 0.049776\n",
      "Cost after iteration 152: 0.049466\n",
      "Cost after iteration 153: 0.049160\n",
      "Cost after iteration 154: 0.048857\n",
      "Cost after iteration 155: 0.048557\n",
      "Cost after iteration 156: 0.048262\n",
      "Cost after iteration 157: 0.047969\n",
      "Cost after iteration 158: 0.047681\n",
      "Cost after iteration 159: 0.047395\n",
      "Cost after iteration 160: 0.047113\n",
      "Cost after iteration 161: 0.046834\n",
      "Cost after iteration 162: 0.046559\n",
      "Cost after iteration 163: 0.046286\n",
      "Cost after iteration 164: 0.046017\n",
      "Cost after iteration 165: 0.045750\n",
      "Cost after iteration 166: 0.045487\n",
      "Cost after iteration 167: 0.045227\n",
      "Cost after iteration 168: 0.044969\n",
      "Cost after iteration 169: 0.044714\n",
      "Cost after iteration 170: 0.044463\n",
      "Cost after iteration 171: 0.044213\n",
      "Cost after iteration 172: 0.043967\n",
      "Cost after iteration 173: 0.043723\n",
      "Cost after iteration 174: 0.043482\n",
      "Cost after iteration 175: 0.043244\n",
      "Cost after iteration 176: 0.043008\n",
      "Cost after iteration 177: 0.042774\n",
      "Cost after iteration 178: 0.042543\n",
      "Cost after iteration 179: 0.042315\n",
      "Cost after iteration 180: 0.042089\n",
      "Cost after iteration 181: 0.041865\n",
      "Cost after iteration 182: 0.041643\n",
      "Cost after iteration 183: 0.041424\n",
      "Cost after iteration 184: 0.041207\n",
      "Cost after iteration 185: 0.040992\n",
      "Cost after iteration 186: 0.040780\n",
      "Cost after iteration 187: 0.040569\n",
      "Cost after iteration 188: 0.040361\n",
      "Cost after iteration 189: 0.040155\n",
      "Cost after iteration 190: 0.039950\n",
      "Cost after iteration 191: 0.039748\n",
      "Cost after iteration 192: 0.039548\n",
      "Cost after iteration 193: 0.039350\n",
      "Cost after iteration 194: 0.039154\n",
      "Cost after iteration 195: 0.038959\n",
      "Cost after iteration 196: 0.038767\n",
      "Cost after iteration 197: 0.038576\n",
      "Cost after iteration 198: 0.038387\n",
      "Cost after iteration 199: 0.038200\n",
      "Cost after iteration 200: 0.038015\n",
      "Cost after iteration 201: 0.037832\n",
      "Cost after iteration 202: 0.037650\n",
      "Cost after iteration 203: 0.037470\n",
      "Cost after iteration 204: 0.037291\n",
      "Cost after iteration 205: 0.037115\n",
      "Cost after iteration 206: 0.036940\n",
      "Cost after iteration 207: 0.036766\n",
      "Cost after iteration 208: 0.036594\n",
      "Cost after iteration 209: 0.036424\n",
      "Cost after iteration 210: 0.036255\n",
      "Cost after iteration 211: 0.036088\n",
      "Cost after iteration 212: 0.035922\n",
      "Cost after iteration 213: 0.035758\n",
      "Cost after iteration 214: 0.035595\n",
      "Cost after iteration 215: 0.035434\n",
      "Cost after iteration 216: 0.035274\n",
      "Cost after iteration 217: 0.035116\n",
      "Cost after iteration 218: 0.034958\n",
      "Cost after iteration 219: 0.034803\n",
      "Cost after iteration 220: 0.034648\n",
      "Cost after iteration 221: 0.034495\n",
      "Cost after iteration 222: 0.034344\n",
      "Cost after iteration 223: 0.034193\n",
      "Cost after iteration 224: 0.034044\n",
      "Cost after iteration 225: 0.033896\n",
      "Cost after iteration 226: 0.033750\n",
      "Cost after iteration 227: 0.033604\n",
      "Cost after iteration 228: 0.033460\n",
      "Cost after iteration 229: 0.033317\n",
      "Cost after iteration 230: 0.033176\n",
      "Cost after iteration 231: 0.033035\n",
      "Cost after iteration 232: 0.032896\n",
      "Cost after iteration 233: 0.032757\n",
      "Cost after iteration 234: 0.032620\n",
      "Cost after iteration 235: 0.032484\n",
      "Cost after iteration 236: 0.032349\n",
      "Cost after iteration 237: 0.032216\n",
      "Cost after iteration 238: 0.032083\n",
      "Cost after iteration 239: 0.031951\n",
      "Cost after iteration 240: 0.031821\n",
      "Cost after iteration 241: 0.031691\n",
      "Cost after iteration 242: 0.031563\n",
      "Cost after iteration 243: 0.031435\n",
      "Cost after iteration 244: 0.031309\n",
      "Cost after iteration 245: 0.031183\n",
      "Cost after iteration 246: 0.031059\n",
      "Cost after iteration 247: 0.030935\n",
      "Cost after iteration 248: 0.030813\n",
      "Cost after iteration 249: 0.030691\n",
      "Cost after iteration 250: 0.030571\n",
      "Cost after iteration 251: 0.030451\n",
      "Cost after iteration 252: 0.030332\n",
      "Cost after iteration 253: 0.030214\n",
      "Cost after iteration 254: 0.030097\n",
      "Cost after iteration 255: 0.029981\n",
      "Cost after iteration 256: 0.029866\n",
      "Cost after iteration 257: 0.029752\n",
      "Cost after iteration 258: 0.029638\n",
      "Cost after iteration 259: 0.029525\n",
      "Cost after iteration 260: 0.029414\n",
      "Cost after iteration 261: 0.029303\n",
      "Cost after iteration 262: 0.029192\n",
      "Cost after iteration 263: 0.029083\n",
      "Cost after iteration 264: 0.028974\n",
      "Cost after iteration 265: 0.028867\n",
      "Cost after iteration 266: 0.028760\n",
      "Cost after iteration 267: 0.028654\n",
      "Cost after iteration 268: 0.028548\n",
      "Cost after iteration 269: 0.028443\n",
      "Cost after iteration 270: 0.028340\n",
      "Cost after iteration 271: 0.028236\n",
      "Cost after iteration 272: 0.028134\n",
      "Cost after iteration 273: 0.028032\n",
      "Cost after iteration 274: 0.027931\n",
      "Cost after iteration 275: 0.027831\n",
      "Cost after iteration 276: 0.027731\n",
      "Cost after iteration 277: 0.027633\n",
      "Cost after iteration 278: 0.027534\n",
      "Cost after iteration 279: 0.027437\n",
      "Cost after iteration 280: 0.027340\n",
      "Cost after iteration 281: 0.027244\n",
      "Cost after iteration 282: 0.027148\n",
      "Cost after iteration 283: 0.027054\n",
      "Cost after iteration 284: 0.026959\n",
      "Cost after iteration 285: 0.026866\n",
      "Cost after iteration 286: 0.026773\n",
      "Cost after iteration 287: 0.026681\n",
      "Cost after iteration 288: 0.026589\n",
      "Cost after iteration 289: 0.026498\n",
      "Cost after iteration 290: 0.026408\n",
      "Cost after iteration 291: 0.026318\n",
      "Cost after iteration 292: 0.026229\n",
      "Cost after iteration 293: 0.026140\n",
      "Cost after iteration 294: 0.026052\n",
      "Cost after iteration 295: 0.025965\n",
      "Cost after iteration 296: 0.025878\n",
      "Cost after iteration 297: 0.025792\n",
      "Cost after iteration 298: 0.025706\n",
      "Cost after iteration 299: 0.025621\n",
      "Cost after iteration 300: 0.025536\n",
      "Cost after iteration 301: 0.025452\n",
      "Cost after iteration 302: 0.025368\n",
      "Cost after iteration 303: 0.025285\n",
      "Cost after iteration 304: 0.025203\n",
      "Cost after iteration 305: 0.025121\n",
      "Cost after iteration 306: 0.025040\n",
      "Cost after iteration 307: 0.024959\n",
      "Cost after iteration 308: 0.024878\n",
      "Cost after iteration 309: 0.024799\n",
      "Cost after iteration 310: 0.024719\n",
      "Cost after iteration 311: 0.024640\n",
      "Cost after iteration 312: 0.024562\n",
      "Cost after iteration 313: 0.024484\n",
      "Cost after iteration 314: 0.024407\n",
      "Cost after iteration 315: 0.024330\n",
      "Cost after iteration 316: 0.024253\n",
      "Cost after iteration 317: 0.024178\n",
      "Cost after iteration 318: 0.024102\n",
      "Cost after iteration 319: 0.024027\n",
      "Cost after iteration 320: 0.023952\n",
      "Cost after iteration 321: 0.023878\n",
      "Cost after iteration 322: 0.023805\n",
      "Cost after iteration 323: 0.023732\n",
      "Cost after iteration 324: 0.023659\n",
      "Cost after iteration 325: 0.023586\n",
      "Cost after iteration 326: 0.023515\n",
      "Cost after iteration 327: 0.023443\n",
      "Cost after iteration 328: 0.023372\n",
      "Cost after iteration 329: 0.023301\n",
      "Cost after iteration 330: 0.023231\n",
      "Cost after iteration 331: 0.023161\n",
      "Cost after iteration 332: 0.023092\n",
      "Cost after iteration 333: 0.023023\n",
      "Cost after iteration 334: 0.022955\n",
      "Cost after iteration 335: 0.022886\n",
      "Cost after iteration 336: 0.022819\n",
      "Cost after iteration 337: 0.022751\n",
      "Cost after iteration 338: 0.022684\n",
      "Cost after iteration 339: 0.022618\n",
      "Cost after iteration 340: 0.022552\n",
      "Cost after iteration 341: 0.022486\n",
      "Cost after iteration 342: 0.022420\n",
      "Cost after iteration 343: 0.022355\n",
      "Cost after iteration 344: 0.022291\n",
      "Cost after iteration 345: 0.022226\n",
      "Cost after iteration 346: 0.022162\n",
      "Cost after iteration 347: 0.022099\n",
      "Cost after iteration 348: 0.022036\n",
      "Cost after iteration 349: 0.021973\n",
      "Cost after iteration 350: 0.021910\n",
      "Cost after iteration 351: 0.021848\n",
      "Cost after iteration 352: 0.021786\n",
      "Cost after iteration 353: 0.021725\n",
      "Cost after iteration 354: 0.021664\n",
      "Cost after iteration 355: 0.021603\n",
      "Cost after iteration 356: 0.021542\n",
      "Cost after iteration 357: 0.021482\n",
      "Cost after iteration 358: 0.021422\n",
      "Cost after iteration 359: 0.021363\n",
      "Cost after iteration 360: 0.021304\n",
      "Cost after iteration 361: 0.021245\n",
      "Cost after iteration 362: 0.021186\n",
      "Cost after iteration 363: 0.021128\n",
      "Cost after iteration 364: 0.021070\n",
      "Cost after iteration 365: 0.021013\n",
      "Cost after iteration 366: 0.020956\n",
      "Cost after iteration 367: 0.020899\n",
      "Cost after iteration 368: 0.020842\n",
      "Cost after iteration 369: 0.020786\n",
      "Cost after iteration 370: 0.020730\n",
      "Cost after iteration 371: 0.020674\n",
      "Cost after iteration 372: 0.020618\n",
      "Cost after iteration 373: 0.020563\n",
      "Cost after iteration 374: 0.020508\n",
      "Cost after iteration 375: 0.020454\n",
      "Cost after iteration 376: 0.020400\n",
      "Cost after iteration 377: 0.020346\n",
      "Cost after iteration 378: 0.020292\n",
      "Cost after iteration 379: 0.020238\n",
      "Cost after iteration 380: 0.020185\n",
      "Cost after iteration 381: 0.020132\n",
      "Cost after iteration 382: 0.020080\n",
      "Cost after iteration 383: 0.020028\n",
      "Cost after iteration 384: 0.019975\n",
      "Cost after iteration 385: 0.019924\n",
      "Cost after iteration 386: 0.019872\n",
      "Cost after iteration 387: 0.019821\n",
      "Cost after iteration 388: 0.019770\n",
      "Cost after iteration 389: 0.019719\n",
      "Cost after iteration 390: 0.019669\n",
      "Cost after iteration 391: 0.019618\n",
      "Cost after iteration 392: 0.019568\n",
      "Cost after iteration 393: 0.019519\n",
      "Cost after iteration 394: 0.019469\n",
      "Cost after iteration 395: 0.019420\n",
      "Cost after iteration 396: 0.019371\n",
      "Cost after iteration 397: 0.019322\n",
      "Cost after iteration 398: 0.019274\n",
      "Cost after iteration 399: 0.019225\n",
      "Cost after iteration 400: 0.019177\n",
      "Cost after iteration 401: 0.019129\n",
      "Cost after iteration 402: 0.019082\n",
      "Cost after iteration 403: 0.019035\n",
      "Cost after iteration 404: 0.018988\n",
      "Cost after iteration 405: 0.018941\n",
      "Cost after iteration 406: 0.018894\n",
      "Cost after iteration 407: 0.018848\n",
      "Cost after iteration 408: 0.018801\n",
      "Cost after iteration 409: 0.018755\n",
      "Cost after iteration 410: 0.018710\n",
      "Cost after iteration 411: 0.018664\n",
      "Cost after iteration 412: 0.018619\n",
      "Cost after iteration 413: 0.018574\n",
      "Cost after iteration 414: 0.018529\n",
      "Cost after iteration 415: 0.018484\n",
      "Cost after iteration 416: 0.018440\n",
      "Cost after iteration 417: 0.018396\n",
      "Cost after iteration 418: 0.018352\n",
      "Cost after iteration 419: 0.018308\n",
      "Cost after iteration 420: 0.018264\n",
      "Cost after iteration 421: 0.018221\n",
      "Cost after iteration 422: 0.018178\n",
      "Cost after iteration 423: 0.018135\n",
      "Cost after iteration 424: 0.018092\n",
      "Cost after iteration 425: 0.018049\n",
      "Cost after iteration 426: 0.018007\n",
      "Cost after iteration 427: 0.017965\n",
      "Cost after iteration 428: 0.017923\n",
      "Cost after iteration 429: 0.017881\n",
      "Cost after iteration 430: 0.017839\n",
      "Cost after iteration 431: 0.017798\n",
      "Cost after iteration 432: 0.017756\n",
      "Cost after iteration 433: 0.017715\n",
      "Cost after iteration 434: 0.017675\n",
      "Cost after iteration 435: 0.017634\n",
      "Cost after iteration 436: 0.017593\n",
      "Cost after iteration 437: 0.017553\n",
      "Cost after iteration 438: 0.017513\n",
      "Cost after iteration 439: 0.017473\n",
      "Cost after iteration 440: 0.017433\n",
      "Cost after iteration 441: 0.017394\n",
      "Cost after iteration 442: 0.017354\n",
      "Cost after iteration 443: 0.017315\n",
      "Cost after iteration 444: 0.017276\n",
      "Cost after iteration 445: 0.017237\n",
      "Cost after iteration 446: 0.017198\n",
      "Cost after iteration 447: 0.017160\n",
      "Cost after iteration 448: 0.017121\n",
      "Cost after iteration 449: 0.017083\n",
      "Cost after iteration 450: 0.017045\n",
      "Cost after iteration 451: 0.017007\n",
      "Cost after iteration 452: 0.016970\n",
      "Cost after iteration 453: 0.016932\n",
      "Cost after iteration 454: 0.016895\n",
      "Cost after iteration 455: 0.016858\n",
      "Cost after iteration 456: 0.016821\n",
      "Cost after iteration 457: 0.016784\n",
      "Cost after iteration 458: 0.016747\n",
      "Cost after iteration 459: 0.016710\n",
      "Cost after iteration 460: 0.016674\n",
      "Cost after iteration 461: 0.016638\n",
      "Cost after iteration 462: 0.016602\n",
      "Cost after iteration 463: 0.016566\n",
      "Cost after iteration 464: 0.016530\n",
      "Cost after iteration 465: 0.016494\n",
      "Cost after iteration 466: 0.016459\n",
      "Cost after iteration 467: 0.016423\n",
      "Cost after iteration 468: 0.016388\n",
      "Cost after iteration 469: 0.016353\n",
      "Cost after iteration 470: 0.016318\n",
      "Cost after iteration 471: 0.016284\n",
      "Cost after iteration 472: 0.016249\n",
      "Cost after iteration 473: 0.016215\n",
      "Cost after iteration 474: 0.016180\n",
      "Cost after iteration 475: 0.016146\n",
      "Cost after iteration 476: 0.016112\n",
      "Cost after iteration 477: 0.016078\n",
      "Cost after iteration 478: 0.016045\n",
      "Cost after iteration 479: 0.016011\n",
      "Cost after iteration 480: 0.015977\n",
      "Cost after iteration 481: 0.015944\n",
      "Cost after iteration 482: 0.015911\n",
      "Cost after iteration 483: 0.015878\n",
      "Cost after iteration 484: 0.015845\n",
      "Cost after iteration 485: 0.015812\n",
      "Cost after iteration 486: 0.015780\n",
      "Cost after iteration 487: 0.015747\n",
      "Cost after iteration 488: 0.015715\n",
      "Cost after iteration 489: 0.015683\n",
      "Cost after iteration 490: 0.015650\n",
      "Cost after iteration 491: 0.015618\n",
      "Cost after iteration 492: 0.015587\n",
      "Cost after iteration 493: 0.015555\n",
      "Cost after iteration 494: 0.015523\n",
      "Cost after iteration 495: 0.015492\n",
      "Cost after iteration 496: 0.015460\n",
      "Cost after iteration 497: 0.015429\n",
      "Cost after iteration 498: 0.015398\n",
      "Cost after iteration 499: 0.015367\n",
      "W = [[-7.94930555  7.68597905]]\n",
      "b = [[-3.80585979]]\n"
     ]
    }
   ],
   "source": [
    "parameters = nn_model(X, Y, num_iterations=500, learning_rate=1.2, print_cost=True)\n",
    "print(\"W = \" + str(parameters[\"W\"]))\n",
    "print(\"b = \" + str(parameters[\"b\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e0ac9dd6-01d7-486d-9a90-875df6bd657f",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_decision_boundary(X, Y, parameters):\n",
    "    W = parameters[\"W\"]\n",
    "    b = parameters[\"b\"]\n",
    "\n",
    "    fig, ax = plt.subplots()\n",
    "    plt.scatter(X[0, :], X[1, :], c=Y, cmap=colors.ListedColormap(['blue', 'red']));\n",
    "    \n",
    "    x_line = np.arange(np.min(X[0,:]),np.max(X[0,:])*1.1, 0.1)\n",
    "    ax.plot(x_line, - W[0,0] / W[0,1] * x_line + -b[0,0] / W[0,1] , color=\"black\")\n",
    "    plt.plot()\n",
    "    plt.show()\n",
    "    \n",
    "plot_decision_boundary(X, Y, parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9dfde6c9-607e-4199-9216-5c5d56f49080",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coordinates (in the columns):\n",
      "[[1 1 0 0]\n",
      " [0 1 0 1]]\n",
      "Predictions:\n",
      "[[False False False  True]]\n"
     ]
    }
   ],
   "source": [
    "def predict(X, parameters):\n",
    "    \"\"\"\n",
    "    Using the learned parameters, predicts a class for each example in X\n",
    "    \n",
    "    Arguments:\n",
    "    parameters -- python dictionary containing your parameters \n",
    "    X -- input data of size (n_x, m)\n",
    "    \n",
    "    Returns\n",
    "    predictions -- vector of predictions of our model (blue: False / red: True)\n",
    "    \"\"\"\n",
    "    \n",
    "    # Computes probabilities using forward propagation, and classifies to 0/1 using 0.5 as the threshold.\n",
    "    A = forward_propagation(X, parameters)\n",
    "    predictions = A > 0.5\n",
    "    \n",
    "    return predictions\n",
    "\n",
    "X_pred = np.array([[1, 1, 0, 0],\n",
    "                   [0, 1, 0, 1]])\n",
    "Y_pred = predict(X_pred, parameters)\n",
    "\n",
    "print(f\"Coordinates (in the columns):\\n{X_pred}\")\n",
    "print(f\"Predictions:\\n{Y_pred}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac2a6c17-ade2-455f-846f-6d61cb565c6f",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "<a name='3'></a>\n",
    "## 3 - Performance on a Larger Dataset\n",
    "\n",
    "Construct a larger and more complex dataset with the function `make_blobs` from the `sklearn.datasets` library:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "22961f15-f844-4517-a11e-0e8747ad9540",
   "metadata": {
    "scrolled": false,
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Dataset\n",
    "n_samples = 1000\n",
    "samples, labels = make_blobs(n_samples=n_samples, \n",
    "                             centers=([2.5, 3], [6.7, 7.9]), \n",
    "                             cluster_std=1.4,\n",
    "                             random_state=0)\n",
    "\n",
    "X_larger = np.transpose(samples)\n",
    "Y_larger = labels.reshape((1,n_samples))\n",
    "\n",
    "plt.scatter(X_larger[0, :], X_larger[1, :], c=Y_larger, cmap=colors.ListedColormap(['blue', 'red']));"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea330b05-a914-4eec-bf17-f211f88b5d95",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "And train your neural network for $600$ iterations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5a04c228-f6b4-46f9-adff-bf232797e513",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost after iteration 0: 0.715632\n",
      "Cost after iteration 1: 0.619924\n",
      "Cost after iteration 2: 0.598855\n",
      "Cost after iteration 3: 0.595347\n",
      "Cost after iteration 4: 0.591877\n",
      "Cost after iteration 5: 0.588444\n",
      "Cost after iteration 6: 0.585047\n",
      "Cost after iteration 7: 0.581686\n",
      "Cost after iteration 8: 0.578359\n",
      "Cost after iteration 9: 0.575067\n",
      "Cost after iteration 10: 0.571807\n",
      "Cost after iteration 11: 0.568581\n",
      "Cost after iteration 12: 0.565387\n",
      "Cost after iteration 13: 0.562225\n",
      "Cost after iteration 14: 0.559094\n",
      "Cost after iteration 15: 0.555995\n",
      "Cost after iteration 16: 0.552925\n",
      "Cost after iteration 17: 0.549885\n",
      "Cost after iteration 18: 0.546875\n",
      "Cost after iteration 19: 0.543894\n",
      "Cost after iteration 20: 0.540942\n",
      "Cost after iteration 21: 0.538018\n",
      "Cost after iteration 22: 0.535121\n",
      "Cost after iteration 23: 0.532252\n",
      "Cost after iteration 24: 0.529411\n",
      "Cost after iteration 25: 0.526596\n",
      "Cost after iteration 26: 0.523807\n",
      "Cost after iteration 27: 0.521045\n",
      "Cost after iteration 28: 0.518309\n",
      "Cost after iteration 29: 0.515598\n",
      "Cost after iteration 30: 0.512912\n",
      "Cost after iteration 31: 0.510251\n",
      "Cost after iteration 32: 0.507615\n",
      "Cost after iteration 33: 0.505002\n",
      "Cost after iteration 34: 0.502414\n",
      "Cost after iteration 35: 0.499850\n",
      "Cost after iteration 36: 0.497309\n",
      "Cost after iteration 37: 0.494791\n",
      "Cost after iteration 38: 0.492297\n",
      "Cost after iteration 39: 0.489825\n",
      "Cost after iteration 40: 0.487375\n",
      "Cost after iteration 41: 0.484947\n",
      "Cost after iteration 42: 0.482542\n",
      "Cost after iteration 43: 0.480158\n",
      "Cost after iteration 44: 0.477795\n",
      "Cost after iteration 45: 0.475454\n",
      "Cost after iteration 46: 0.473134\n",
      "Cost after iteration 47: 0.470834\n",
      "Cost after iteration 48: 0.468555\n",
      "Cost after iteration 49: 0.466296\n",
      "Cost after iteration 50: 0.464057\n",
      "Cost after iteration 51: 0.461838\n",
      "Cost after iteration 52: 0.459639\n",
      "Cost after iteration 53: 0.457459\n",
      "Cost after iteration 54: 0.455299\n",
      "Cost after iteration 55: 0.453157\n",
      "Cost after iteration 56: 0.451034\n",
      "Cost after iteration 57: 0.448930\n",
      "Cost after iteration 58: 0.446844\n",
      "Cost after iteration 59: 0.444776\n",
      "Cost after iteration 60: 0.442727\n",
      "Cost after iteration 61: 0.440695\n",
      "Cost after iteration 62: 0.438681\n",
      "Cost after iteration 63: 0.436684\n",
      "Cost after iteration 64: 0.434705\n",
      "Cost after iteration 65: 0.432742\n",
      "Cost after iteration 66: 0.430796\n",
      "Cost after iteration 67: 0.428868\n",
      "Cost after iteration 68: 0.426955\n",
      "Cost after iteration 69: 0.425059\n",
      "Cost after iteration 70: 0.423179\n",
      "Cost after iteration 71: 0.421316\n",
      "Cost after iteration 72: 0.419467\n",
      "Cost after iteration 73: 0.417635\n",
      "Cost after iteration 74: 0.415818\n",
      "Cost after iteration 75: 0.414017\n",
      "Cost after iteration 76: 0.412230\n",
      "Cost after iteration 77: 0.410459\n",
      "Cost after iteration 78: 0.408702\n",
      "Cost after iteration 79: 0.406961\n",
      "Cost after iteration 80: 0.405233\n",
      "Cost after iteration 81: 0.403520\n",
      "Cost after iteration 82: 0.401822\n",
      "Cost after iteration 83: 0.400137\n",
      "Cost after iteration 84: 0.398466\n",
      "Cost after iteration 85: 0.396809\n",
      "Cost after iteration 86: 0.395166\n",
      "Cost after iteration 87: 0.393536\n",
      "Cost after iteration 88: 0.391920\n",
      "Cost after iteration 89: 0.390316\n",
      "Cost after iteration 90: 0.388726\n",
      "Cost after iteration 91: 0.387149\n",
      "Cost after iteration 92: 0.385585\n",
      "Cost after iteration 93: 0.384033\n",
      "Cost after iteration 94: 0.382493\n",
      "Cost after iteration 95: 0.380966\n",
      "Cost after iteration 96: 0.379452\n",
      "Cost after iteration 97: 0.377949\n",
      "Cost after iteration 98: 0.376459\n",
      "Cost after iteration 99: 0.374980\n",
      "Cost after iteration 100: 0.373513\n",
      "Cost after iteration 101: 0.372058\n",
      "Cost after iteration 102: 0.370614\n",
      "Cost after iteration 103: 0.369182\n",
      "Cost after iteration 104: 0.367761\n",
      "Cost after iteration 105: 0.366351\n",
      "Cost after iteration 106: 0.364952\n",
      "Cost after iteration 107: 0.363564\n",
      "Cost after iteration 108: 0.362187\n",
      "Cost after iteration 109: 0.360821\n",
      "Cost after iteration 110: 0.359465\n",
      "Cost after iteration 111: 0.358120\n",
      "Cost after iteration 112: 0.356785\n",
      "Cost after iteration 113: 0.355460\n",
      "Cost after iteration 114: 0.354145\n",
      "Cost after iteration 115: 0.352841\n",
      "Cost after iteration 116: 0.351546\n",
      "Cost after iteration 117: 0.350262\n",
      "Cost after iteration 118: 0.348987\n",
      "Cost after iteration 119: 0.347722\n",
      "Cost after iteration 120: 0.346466\n",
      "Cost after iteration 121: 0.345220\n",
      "Cost after iteration 122: 0.343983\n",
      "Cost after iteration 123: 0.342755\n",
      "Cost after iteration 124: 0.341537\n",
      "Cost after iteration 125: 0.340327\n",
      "Cost after iteration 126: 0.339127\n",
      "Cost after iteration 127: 0.337936\n",
      "Cost after iteration 128: 0.336753\n",
      "Cost after iteration 129: 0.335579\n",
      "Cost after iteration 130: 0.334414\n",
      "Cost after iteration 131: 0.333257\n",
      "Cost after iteration 132: 0.332109\n",
      "Cost after iteration 133: 0.330969\n",
      "Cost after iteration 134: 0.329837\n",
      "Cost after iteration 135: 0.328714\n",
      "Cost after iteration 136: 0.327598\n",
      "Cost after iteration 137: 0.326491\n",
      "Cost after iteration 138: 0.325392\n",
      "Cost after iteration 139: 0.324300\n",
      "Cost after iteration 140: 0.323217\n",
      "Cost after iteration 141: 0.322141\n",
      "Cost after iteration 142: 0.321073\n",
      "Cost after iteration 143: 0.320012\n",
      "Cost after iteration 144: 0.318959\n",
      "Cost after iteration 145: 0.317913\n",
      "Cost after iteration 146: 0.316875\n",
      "Cost after iteration 147: 0.315844\n",
      "Cost after iteration 148: 0.314820\n",
      "Cost after iteration 149: 0.313804\n",
      "Cost after iteration 150: 0.312794\n",
      "Cost after iteration 151: 0.311792\n",
      "Cost after iteration 152: 0.310796\n",
      "Cost after iteration 153: 0.309807\n",
      "Cost after iteration 154: 0.308825\n",
      "Cost after iteration 155: 0.307850\n",
      "Cost after iteration 156: 0.306882\n",
      "Cost after iteration 157: 0.305920\n",
      "Cost after iteration 158: 0.304965\n",
      "Cost after iteration 159: 0.304016\n",
      "Cost after iteration 160: 0.303073\n",
      "Cost after iteration 161: 0.302137\n",
      "Cost after iteration 162: 0.301208\n",
      "Cost after iteration 163: 0.300284\n",
      "Cost after iteration 164: 0.299367\n",
      "Cost after iteration 165: 0.298456\n",
      "Cost after iteration 166: 0.297551\n",
      "Cost after iteration 167: 0.296652\n",
      "Cost after iteration 168: 0.295759\n",
      "Cost after iteration 169: 0.294872\n",
      "Cost after iteration 170: 0.293990\n",
      "Cost after iteration 171: 0.293115\n",
      "Cost after iteration 172: 0.292245\n",
      "Cost after iteration 173: 0.291381\n",
      "Cost after iteration 174: 0.290522\n",
      "Cost after iteration 175: 0.289670\n",
      "Cost after iteration 176: 0.288822\n",
      "Cost after iteration 177: 0.287980\n",
      "Cost after iteration 178: 0.287144\n",
      "Cost after iteration 179: 0.286313\n",
      "Cost after iteration 180: 0.285487\n",
      "Cost after iteration 181: 0.284667\n",
      "Cost after iteration 182: 0.283852\n",
      "Cost after iteration 183: 0.283042\n",
      "Cost after iteration 184: 0.282237\n",
      "Cost after iteration 185: 0.281437\n",
      "Cost after iteration 186: 0.280643\n",
      "Cost after iteration 187: 0.279853\n",
      "Cost after iteration 188: 0.279068\n",
      "Cost after iteration 189: 0.278288\n",
      "Cost after iteration 190: 0.277513\n",
      "Cost after iteration 191: 0.276743\n",
      "Cost after iteration 192: 0.275978\n",
      "Cost after iteration 193: 0.275218\n",
      "Cost after iteration 194: 0.274462\n",
      "Cost after iteration 195: 0.273710\n",
      "Cost after iteration 196: 0.272964\n",
      "Cost after iteration 197: 0.272222\n",
      "Cost after iteration 198: 0.271484\n",
      "Cost after iteration 199: 0.270752\n",
      "Cost after iteration 200: 0.270023\n",
      "Cost after iteration 201: 0.269299\n",
      "Cost after iteration 202: 0.268579\n",
      "Cost after iteration 203: 0.267864\n",
      "Cost after iteration 204: 0.267153\n",
      "Cost after iteration 205: 0.266446\n",
      "Cost after iteration 206: 0.265744\n",
      "Cost after iteration 207: 0.265045\n",
      "Cost after iteration 208: 0.264351\n",
      "Cost after iteration 209: 0.263661\n",
      "Cost after iteration 210: 0.262975\n",
      "Cost after iteration 211: 0.262293\n",
      "Cost after iteration 212: 0.261615\n",
      "Cost after iteration 213: 0.260941\n",
      "Cost after iteration 214: 0.260271\n",
      "Cost after iteration 215: 0.259605\n",
      "Cost after iteration 216: 0.258943\n",
      "Cost after iteration 217: 0.258285\n",
      "Cost after iteration 218: 0.257630\n",
      "Cost after iteration 219: 0.256980\n",
      "Cost after iteration 220: 0.256333\n",
      "Cost after iteration 221: 0.255689\n",
      "Cost after iteration 222: 0.255050\n",
      "Cost after iteration 223: 0.254414\n",
      "Cost after iteration 224: 0.253782\n",
      "Cost after iteration 225: 0.253153\n",
      "Cost after iteration 226: 0.252528\n",
      "Cost after iteration 227: 0.251907\n",
      "Cost after iteration 228: 0.251289\n",
      "Cost after iteration 229: 0.250674\n",
      "Cost after iteration 230: 0.250063\n",
      "Cost after iteration 231: 0.249455\n",
      "Cost after iteration 232: 0.248851\n",
      "Cost after iteration 233: 0.248250\n",
      "Cost after iteration 234: 0.247653\n",
      "Cost after iteration 235: 0.247059\n",
      "Cost after iteration 236: 0.246468\n",
      "Cost after iteration 237: 0.245880\n",
      "Cost after iteration 238: 0.245296\n",
      "Cost after iteration 239: 0.244714\n",
      "Cost after iteration 240: 0.244136\n",
      "Cost after iteration 241: 0.243562\n",
      "Cost after iteration 242: 0.242990\n",
      "Cost after iteration 243: 0.242421\n",
      "Cost after iteration 244: 0.241856\n",
      "Cost after iteration 245: 0.241293\n",
      "Cost after iteration 246: 0.240734\n",
      "Cost after iteration 247: 0.240178\n",
      "Cost after iteration 248: 0.239624\n",
      "Cost after iteration 249: 0.239074\n",
      "Cost after iteration 250: 0.238526\n",
      "Cost after iteration 251: 0.237982\n",
      "Cost after iteration 252: 0.237440\n",
      "Cost after iteration 253: 0.236901\n",
      "Cost after iteration 254: 0.236365\n",
      "Cost after iteration 255: 0.235832\n",
      "Cost after iteration 256: 0.235302\n",
      "Cost after iteration 257: 0.234774\n",
      "Cost after iteration 258: 0.234250\n",
      "Cost after iteration 259: 0.233728\n",
      "Cost after iteration 260: 0.233208\n",
      "Cost after iteration 261: 0.232692\n",
      "Cost after iteration 262: 0.232178\n",
      "Cost after iteration 263: 0.231667\n",
      "Cost after iteration 264: 0.231158\n",
      "Cost after iteration 265: 0.230652\n",
      "Cost after iteration 266: 0.230149\n",
      "Cost after iteration 267: 0.229648\n",
      "Cost after iteration 268: 0.229150\n",
      "Cost after iteration 269: 0.228654\n",
      "Cost after iteration 270: 0.228161\n",
      "Cost after iteration 271: 0.227670\n",
      "Cost after iteration 272: 0.227182\n",
      "Cost after iteration 273: 0.226696\n",
      "Cost after iteration 274: 0.226213\n",
      "Cost after iteration 275: 0.225732\n",
      "Cost after iteration 276: 0.225254\n",
      "Cost after iteration 277: 0.224778\n",
      "Cost after iteration 278: 0.224304\n",
      "Cost after iteration 279: 0.223833\n",
      "Cost after iteration 280: 0.223364\n",
      "Cost after iteration 281: 0.222897\n",
      "Cost after iteration 282: 0.222433\n",
      "Cost after iteration 283: 0.221971\n",
      "Cost after iteration 284: 0.221511\n",
      "Cost after iteration 285: 0.221054\n",
      "Cost after iteration 286: 0.220598\n",
      "Cost after iteration 287: 0.220145\n",
      "Cost after iteration 288: 0.219695\n",
      "Cost after iteration 289: 0.219246\n",
      "Cost after iteration 290: 0.218799\n",
      "Cost after iteration 291: 0.218355\n",
      "Cost after iteration 292: 0.217913\n",
      "Cost after iteration 293: 0.217473\n",
      "Cost after iteration 294: 0.217035\n",
      "Cost after iteration 295: 0.216599\n",
      "Cost after iteration 296: 0.216166\n",
      "Cost after iteration 297: 0.215734\n",
      "Cost after iteration 298: 0.215304\n",
      "Cost after iteration 299: 0.214877\n",
      "Cost after iteration 300: 0.214451\n",
      "Cost after iteration 301: 0.214028\n",
      "Cost after iteration 302: 0.213606\n",
      "Cost after iteration 303: 0.213187\n",
      "Cost after iteration 304: 0.212769\n",
      "Cost after iteration 305: 0.212354\n",
      "Cost after iteration 306: 0.211940\n",
      "Cost after iteration 307: 0.211528\n",
      "Cost after iteration 308: 0.211119\n",
      "Cost after iteration 309: 0.210711\n",
      "Cost after iteration 310: 0.210305\n",
      "Cost after iteration 311: 0.209901\n",
      "Cost after iteration 312: 0.209498\n",
      "Cost after iteration 313: 0.209098\n",
      "Cost after iteration 314: 0.208699\n",
      "Cost after iteration 315: 0.208303\n",
      "Cost after iteration 316: 0.207908\n",
      "Cost after iteration 317: 0.207515\n",
      "Cost after iteration 318: 0.207123\n",
      "Cost after iteration 319: 0.206734\n",
      "Cost after iteration 320: 0.206346\n",
      "Cost after iteration 321: 0.205960\n",
      "Cost after iteration 322: 0.205575\n",
      "Cost after iteration 323: 0.205193\n",
      "Cost after iteration 324: 0.204812\n",
      "Cost after iteration 325: 0.204433\n",
      "Cost after iteration 326: 0.204055\n",
      "Cost after iteration 327: 0.203680\n",
      "Cost after iteration 328: 0.203306\n",
      "Cost after iteration 329: 0.202933\n",
      "Cost after iteration 330: 0.202562\n",
      "Cost after iteration 331: 0.202193\n",
      "Cost after iteration 332: 0.201826\n",
      "Cost after iteration 333: 0.201460\n",
      "Cost after iteration 334: 0.201095\n",
      "Cost after iteration 335: 0.200733\n",
      "Cost after iteration 336: 0.200372\n",
      "Cost after iteration 337: 0.200012\n",
      "Cost after iteration 338: 0.199654\n",
      "Cost after iteration 339: 0.199298\n",
      "Cost after iteration 340: 0.198943\n",
      "Cost after iteration 341: 0.198590\n",
      "Cost after iteration 342: 0.198238\n",
      "Cost after iteration 343: 0.197887\n",
      "Cost after iteration 344: 0.197539\n",
      "Cost after iteration 345: 0.197191\n",
      "Cost after iteration 346: 0.196846\n",
      "Cost after iteration 347: 0.196501\n",
      "Cost after iteration 348: 0.196158\n",
      "Cost after iteration 349: 0.195817\n",
      "Cost after iteration 350: 0.195477\n",
      "Cost after iteration 351: 0.195138\n",
      "Cost after iteration 352: 0.194801\n",
      "Cost after iteration 353: 0.194466\n",
      "Cost after iteration 354: 0.194131\n",
      "Cost after iteration 355: 0.193799\n",
      "Cost after iteration 356: 0.193467\n",
      "Cost after iteration 357: 0.193137\n",
      "Cost after iteration 358: 0.192808\n",
      "Cost after iteration 359: 0.192481\n",
      "Cost after iteration 360: 0.192155\n",
      "Cost after iteration 361: 0.191830\n",
      "Cost after iteration 362: 0.191507\n",
      "Cost after iteration 363: 0.191185\n",
      "Cost after iteration 364: 0.190865\n",
      "Cost after iteration 365: 0.190545\n",
      "Cost after iteration 366: 0.190227\n",
      "Cost after iteration 367: 0.189911\n",
      "Cost after iteration 368: 0.189595\n",
      "Cost after iteration 369: 0.189281\n",
      "Cost after iteration 370: 0.188968\n",
      "Cost after iteration 371: 0.188657\n",
      "Cost after iteration 372: 0.188346\n",
      "Cost after iteration 373: 0.188037\n",
      "Cost after iteration 374: 0.187730\n",
      "Cost after iteration 375: 0.187423\n",
      "Cost after iteration 376: 0.187118\n",
      "Cost after iteration 377: 0.186814\n",
      "Cost after iteration 378: 0.186511\n",
      "Cost after iteration 379: 0.186209\n",
      "Cost after iteration 380: 0.185909\n",
      "Cost after iteration 381: 0.185609\n",
      "Cost after iteration 382: 0.185311\n",
      "Cost after iteration 383: 0.185014\n",
      "Cost after iteration 384: 0.184719\n",
      "Cost after iteration 385: 0.184424\n",
      "Cost after iteration 386: 0.184131\n",
      "Cost after iteration 387: 0.183839\n",
      "Cost after iteration 388: 0.183547\n",
      "Cost after iteration 389: 0.183257\n",
      "Cost after iteration 390: 0.182969\n",
      "Cost after iteration 391: 0.182681\n",
      "Cost after iteration 392: 0.182394\n",
      "Cost after iteration 393: 0.182109\n",
      "Cost after iteration 394: 0.181824\n",
      "Cost after iteration 395: 0.181541\n",
      "Cost after iteration 396: 0.181259\n",
      "Cost after iteration 397: 0.180978\n",
      "Cost after iteration 398: 0.180698\n",
      "Cost after iteration 399: 0.180419\n",
      "Cost after iteration 400: 0.180141\n",
      "Cost after iteration 401: 0.179864\n",
      "Cost after iteration 402: 0.179589\n",
      "Cost after iteration 403: 0.179314\n",
      "Cost after iteration 404: 0.179040\n",
      "Cost after iteration 405: 0.178768\n",
      "Cost after iteration 406: 0.178496\n",
      "Cost after iteration 407: 0.178226\n",
      "Cost after iteration 408: 0.177956\n",
      "Cost after iteration 409: 0.177688\n",
      "Cost after iteration 410: 0.177420\n",
      "Cost after iteration 411: 0.177153\n",
      "Cost after iteration 412: 0.176888\n",
      "Cost after iteration 413: 0.176623\n",
      "Cost after iteration 414: 0.176360\n",
      "Cost after iteration 415: 0.176097\n",
      "Cost after iteration 416: 0.175836\n",
      "Cost after iteration 417: 0.175575\n",
      "Cost after iteration 418: 0.175316\n",
      "Cost after iteration 419: 0.175057\n",
      "Cost after iteration 420: 0.174799\n",
      "Cost after iteration 421: 0.174542\n",
      "Cost after iteration 422: 0.174286\n",
      "Cost after iteration 423: 0.174032\n",
      "Cost after iteration 424: 0.173778\n",
      "Cost after iteration 425: 0.173525\n",
      "Cost after iteration 426: 0.173272\n",
      "Cost after iteration 427: 0.173021\n",
      "Cost after iteration 428: 0.172771\n",
      "Cost after iteration 429: 0.172522\n",
      "Cost after iteration 430: 0.172273\n",
      "Cost after iteration 431: 0.172025\n",
      "Cost after iteration 432: 0.171779\n",
      "Cost after iteration 433: 0.171533\n",
      "Cost after iteration 434: 0.171288\n",
      "Cost after iteration 435: 0.171044\n",
      "Cost after iteration 436: 0.170801\n",
      "Cost after iteration 437: 0.170558\n",
      "Cost after iteration 438: 0.170317\n",
      "Cost after iteration 439: 0.170076\n",
      "Cost after iteration 440: 0.169837\n",
      "Cost after iteration 441: 0.169598\n",
      "Cost after iteration 442: 0.169360\n",
      "Cost after iteration 443: 0.169123\n",
      "Cost after iteration 444: 0.168886\n",
      "Cost after iteration 445: 0.168651\n",
      "Cost after iteration 446: 0.168416\n",
      "Cost after iteration 447: 0.168182\n",
      "Cost after iteration 448: 0.167949\n",
      "Cost after iteration 449: 0.167717\n",
      "Cost after iteration 450: 0.167485\n",
      "Cost after iteration 451: 0.167255\n",
      "Cost after iteration 452: 0.167025\n",
      "Cost after iteration 453: 0.166796\n",
      "Cost after iteration 454: 0.166567\n",
      "Cost after iteration 455: 0.166340\n",
      "Cost after iteration 456: 0.166113\n",
      "Cost after iteration 457: 0.165887\n",
      "Cost after iteration 458: 0.165662\n",
      "Cost after iteration 459: 0.165438\n",
      "Cost after iteration 460: 0.165214\n",
      "Cost after iteration 461: 0.164991\n",
      "Cost after iteration 462: 0.164769\n",
      "Cost after iteration 463: 0.164548\n",
      "Cost after iteration 464: 0.164327\n",
      "Cost after iteration 465: 0.164108\n",
      "Cost after iteration 466: 0.163889\n",
      "Cost after iteration 467: 0.163670\n",
      "Cost after iteration 468: 0.163453\n",
      "Cost after iteration 469: 0.163236\n",
      "Cost after iteration 470: 0.163020\n",
      "Cost after iteration 471: 0.162804\n",
      "Cost after iteration 472: 0.162590\n",
      "Cost after iteration 473: 0.162376\n",
      "Cost after iteration 474: 0.162162\n",
      "Cost after iteration 475: 0.161950\n",
      "Cost after iteration 476: 0.161738\n",
      "Cost after iteration 477: 0.161527\n",
      "Cost after iteration 478: 0.161316\n",
      "Cost after iteration 479: 0.161107\n",
      "Cost after iteration 480: 0.160898\n",
      "Cost after iteration 481: 0.160689\n",
      "Cost after iteration 482: 0.160482\n",
      "Cost after iteration 483: 0.160275\n",
      "Cost after iteration 484: 0.160068\n",
      "Cost after iteration 485: 0.159863\n",
      "Cost after iteration 486: 0.159658\n",
      "Cost after iteration 487: 0.159453\n",
      "Cost after iteration 488: 0.159250\n",
      "Cost after iteration 489: 0.159047\n",
      "Cost after iteration 490: 0.158845\n",
      "Cost after iteration 491: 0.158643\n",
      "Cost after iteration 492: 0.158442\n",
      "Cost after iteration 493: 0.158242\n",
      "Cost after iteration 494: 0.158042\n",
      "Cost after iteration 495: 0.157843\n",
      "Cost after iteration 496: 0.157644\n",
      "Cost after iteration 497: 0.157447\n",
      "Cost after iteration 498: 0.157249\n",
      "Cost after iteration 499: 0.157053\n",
      "Cost after iteration 500: 0.156857\n",
      "Cost after iteration 501: 0.156662\n",
      "Cost after iteration 502: 0.156467\n",
      "Cost after iteration 503: 0.156273\n",
      "Cost after iteration 504: 0.156080\n",
      "Cost after iteration 505: 0.155887\n",
      "Cost after iteration 506: 0.155695\n",
      "Cost after iteration 507: 0.155503\n",
      "Cost after iteration 508: 0.155312\n",
      "Cost after iteration 509: 0.155122\n",
      "Cost after iteration 510: 0.154932\n",
      "Cost after iteration 511: 0.154743\n",
      "Cost after iteration 512: 0.154554\n",
      "Cost after iteration 513: 0.154366\n",
      "Cost after iteration 514: 0.154179\n",
      "Cost after iteration 515: 0.153992\n",
      "Cost after iteration 516: 0.153806\n",
      "Cost after iteration 517: 0.153620\n",
      "Cost after iteration 518: 0.153435\n",
      "Cost after iteration 519: 0.153250\n",
      "Cost after iteration 520: 0.153066\n",
      "Cost after iteration 521: 0.152883\n",
      "Cost after iteration 522: 0.152700\n",
      "Cost after iteration 523: 0.152518\n",
      "Cost after iteration 524: 0.152336\n",
      "Cost after iteration 525: 0.152155\n",
      "Cost after iteration 526: 0.151974\n",
      "Cost after iteration 527: 0.151794\n",
      "Cost after iteration 528: 0.151615\n",
      "Cost after iteration 529: 0.151436\n",
      "Cost after iteration 530: 0.151257\n",
      "Cost after iteration 531: 0.151079\n",
      "Cost after iteration 532: 0.150902\n",
      "Cost after iteration 533: 0.150725\n",
      "Cost after iteration 534: 0.150549\n",
      "Cost after iteration 535: 0.150373\n",
      "Cost after iteration 536: 0.150198\n",
      "Cost after iteration 537: 0.150023\n",
      "Cost after iteration 538: 0.149849\n",
      "Cost after iteration 539: 0.149676\n",
      "Cost after iteration 540: 0.149502\n",
      "Cost after iteration 541: 0.149330\n",
      "Cost after iteration 542: 0.149158\n",
      "Cost after iteration 543: 0.148986\n",
      "Cost after iteration 544: 0.148815\n",
      "Cost after iteration 545: 0.148644\n",
      "Cost after iteration 546: 0.148474\n",
      "Cost after iteration 547: 0.148305\n",
      "Cost after iteration 548: 0.148136\n",
      "Cost after iteration 549: 0.147967\n",
      "Cost after iteration 550: 0.147799\n",
      "Cost after iteration 551: 0.147632\n",
      "Cost after iteration 552: 0.147465\n",
      "Cost after iteration 553: 0.147298\n",
      "Cost after iteration 554: 0.147132\n",
      "Cost after iteration 555: 0.146966\n",
      "Cost after iteration 556: 0.146801\n",
      "Cost after iteration 557: 0.146636\n",
      "Cost after iteration 558: 0.146472\n",
      "Cost after iteration 559: 0.146309\n",
      "Cost after iteration 560: 0.146145\n",
      "Cost after iteration 561: 0.145983\n",
      "Cost after iteration 562: 0.145820\n",
      "Cost after iteration 563: 0.145658\n",
      "Cost after iteration 564: 0.145497\n",
      "Cost after iteration 565: 0.145336\n",
      "Cost after iteration 566: 0.145176\n",
      "Cost after iteration 567: 0.145016\n",
      "Cost after iteration 568: 0.144856\n",
      "Cost after iteration 569: 0.144697\n",
      "Cost after iteration 570: 0.144539\n",
      "Cost after iteration 571: 0.144380\n",
      "Cost after iteration 572: 0.144223\n",
      "Cost after iteration 573: 0.144066\n",
      "Cost after iteration 574: 0.143909\n",
      "Cost after iteration 575: 0.143752\n",
      "Cost after iteration 576: 0.143596\n",
      "Cost after iteration 577: 0.143441\n",
      "Cost after iteration 578: 0.143286\n",
      "Cost after iteration 579: 0.143131\n",
      "Cost after iteration 580: 0.142977\n",
      "Cost after iteration 581: 0.142823\n",
      "Cost after iteration 582: 0.142670\n",
      "Cost after iteration 583: 0.142517\n",
      "Cost after iteration 584: 0.142365\n",
      "Cost after iteration 585: 0.142213\n",
      "Cost after iteration 586: 0.142061\n",
      "Cost after iteration 587: 0.141910\n",
      "Cost after iteration 588: 0.141759\n",
      "Cost after iteration 589: 0.141609\n",
      "Cost after iteration 590: 0.141459\n",
      "Cost after iteration 591: 0.141309\n",
      "Cost after iteration 592: 0.141160\n",
      "Cost after iteration 593: 0.141011\n",
      "Cost after iteration 594: 0.140863\n",
      "Cost after iteration 595: 0.140715\n",
      "Cost after iteration 596: 0.140568\n",
      "Cost after iteration 597: 0.140421\n",
      "Cost after iteration 598: 0.140274\n",
      "Cost after iteration 599: 0.140128\n",
      "W = [[0.49908216 0.51641999]]\n",
      "b = [[-4.69274864]]\n"
     ]
    }
   ],
   "source": [
    "parameters_larger = nn_model(X_larger, Y_larger, num_iterations=600, learning_rate=0.1, print_cost=True)\n",
    "print(\"W = \" + str(parameters_larger[\"W\"]))\n",
    "print(\"b = \" + str(parameters_larger[\"b\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d61017a-31dc-44dd-ac68-b36ba8d7fb12",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "Plot the decision boundary:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8a062d70-de48-486d-b8cd-2d24f9072755",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_decision_boundary(X_larger, Y_larger, parameters_larger)"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "C1_W1_Assignment_Solution.ipynb",
   "provenance": []
  },
  "coursera": {
   "schema_names": [
    "AI4MC1-1"
   ]
  },
  "grader_version": "1",
  "kernelspec": {
   "display_name": "Python 3.13 (WSL code-venv)",
   "language": "python",
   "name": "wsl-code-venv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
