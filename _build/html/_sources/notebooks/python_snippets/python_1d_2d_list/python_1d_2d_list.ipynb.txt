{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5d47c81e",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "# Python 1D, 2D Lists\n",
    "## 1D List\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91dec509",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "## Basic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57085e35",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Create a 1D list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5cfbb883",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5]\n"
     ]
    }
   ],
   "source": [
    "# Create a 1d list with 5 elements [1,2,3,4,5] using list comprehension\n",
    "my_list = [i for i in range(1,6)]\n",
    "print(my_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "085be201",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Sum of 1D list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d878d485",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "# Sum of a 1d list\n",
    "my_list_sum = sum(my_list)\n",
    "print(my_list_sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56c2a0f5",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Min and Max in 1D list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2e078b64",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 5\n"
     ]
    }
   ],
   "source": [
    "# Find min/max in a 1d list\n",
    "my_list = [1,2,3,4,5]\n",
    "min_val = min(my_list)\n",
    "max_val = max(my_list)\n",
    "print(min_val, max_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d77f5af",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Average of 1D list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "541e14fc",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.0\n"
     ]
    }
   ],
   "source": [
    "# Average of a 1d list\n",
    "my_list = [1,2,3,4,5]\n",
    "avg = sum(my_list) / len(my_list)\n",
    "print(avg)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f9f4b3d",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Sort 1D list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "92380022",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5] [5, 4, 3, 2, 1]\n"
     ]
    }
   ],
   "source": [
    "# Sort a 1d list ascendingly/descendingly\n",
    "my_list = [5,3,1,4,2]\n",
    "ascending, descending = sorted(my_list, reverse=False), sorted(my_list, reverse=True)\n",
    "print(ascending, descending)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aef1e629",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Sum of even and odd numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dced3502",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6 9\n"
     ]
    }
   ],
   "source": [
    "# Sum of even/odd numbers in a 1d list\n",
    "my_list = [1,2,3,4,5]\n",
    "even = sum(list(filter(lambda x: x % 2 == 0, my_list)))\n",
    "odd = sum(list(filter(lambda x: x % 2 != 0, my_list)))\n",
    "print(even, odd)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9515377e",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "## Advanced"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "545da829",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Find even/odd numbers and their sums"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "32fcb8d3",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 4, 6, 8, 10] 30 [1, 3, 5, 7, 9] 25\n"
     ]
    }
   ],
   "source": [
    "# Find even/odd numbers and sum of each\n",
    "my_list = [1,2,3,4,5,6,7,8,9,10]\n",
    "even_numbers = list(filter(lambda x: x % 2 == 0, my_list))\n",
    "sum_even = sum(even_numbers)\n",
    "odd_numbers = list(filter(lambda x: x % 2 != 0, my_list))\n",
    "sum_odd = sum(odd_numbers)\n",
    "print(even_numbers, sum_even, odd_numbers, sum_odd)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd4119c5",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Sum of primes in 1D list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6cc503e0",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3, 5, 7] 17\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "# Sum of prime numbers in a 1d list\n",
    "def is_prime(n):\n",
    "    if n < 2:\n",
    "        return False\n",
    "    for i in range(2, int(math.sqrt(n)) + 1):\n",
    "        if n % i == 0:\n",
    "            return False\n",
    "    return True\n",
    "\n",
    "my_list = [2,3,4,5,6,7,8,9,10]\n",
    "prime_numbers = list(filter(is_prime, my_list))\n",
    "sum_prime = sum(prime_numbers)\n",
    "print(prime_numbers, sum_prime)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1b7d2d1",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Sum of positives and product of negatives"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bbaefebb",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12 -15\n"
     ]
    }
   ],
   "source": [
    "# Sum of positive numbers and product of negatives numbers\n",
    "my_list = [-1,2,-3,4,-5,6]\n",
    "positive_numbers = [x for x in my_list if x > 0]\n",
    "negative_numbers = [x for x in my_list if x < 0]\n",
    "sum_positive = sum(positive_numbers)\n",
    "product_negative = 1\n",
    "for neg in negative_numbers:\n",
    "    product_negative *= neg\n",
    "print(sum_positive, product_negative)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ceeb623a",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Sum after removing duplicates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "24ab423c",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 6, 7, 8] 36\n"
     ]
    }
   ],
   "source": [
    "# Sum of a 1d list after eliminating duplicates\n",
    "my_list = [1, 2, 3, 2, 4, 5, 1, 6, 7, 8, 5]\n",
    "unique_numbers = list(set(my_list))\n",
    "sum_unique = sum(unique_numbers)\n",
    "print(unique_numbers, sum_unique)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7eb545a0",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "## 2D List"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23b0d9ef",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Basic"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40e50376",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Sum of 2D list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "108263f9",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45\n"
     ]
    }
   ],
   "source": [
    "# Sum of elements in a 2d list\n",
    "my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
    "total = sum([sum(sub_list) for sub_list in my_list])\n",
    "print(total)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "718f87b2",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Min and Max in 2D list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09e41842",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9 1\n"
     ]
    }
   ],
   "source": [
    "# Find max/min in a 2d list\n",
    "my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
    "max_value = max([max(sub_list) for sub_list in my_list])\n",
    "min_value = min([min(sub_list) for sub_list in my_list])\n",
    "print(min_value, max_value)  # order matches heading"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54c6adc3",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Average of 2D list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a733be64",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.0\n"
     ]
    }
   ],
   "source": [
    "# Average of a 2d list\n",
    "my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
    "total = sum([sum(sub_list) for sub_list in my_list])\n",
    "average = total / (len(my_list)*len(my_list[0]))\n",
    "print(average)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "febc0c07",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Sort sublists in 2D list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "a8772c74",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1, 3, 5], [2, 4, 6], [7, 8, 9]] [[5, 3, 1], [6, 4, 2], [9, 8, 7]]\n"
     ]
    }
   ],
   "source": [
    "# Sort sublists in a 2d list ascending/descending\n",
    "my_list = [[5, 3, 1], [4, 2, 6], [9, 7, 8]]\n",
    "ascending = [sorted(sublist) for sublist in my_list]\n",
    "descending = [sorted(sublist, reverse=True) for sublist in my_list]\n",
    "print(ascending, descending)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70f4a73a",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "## Advanced"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "157206b1",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Row sums and total sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9a4185f0",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6, 15, 24] 45\n"
     ]
    }
   ],
   "source": [
    "# Sum of rows and sum of (sum of rows)\n",
    "my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
    "row_sums = [sum(row) for row in my_list]\n",
    "total_sum = sum(row_sums)\n",
    "print(row_sums, total_sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be053a6b",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Column sums and total sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "41bdfb75",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[12, 15, 18] 45\n"
     ]
    }
   ],
   "source": [
    "# Sum of each column and sum of (sum of each column)\n",
    "my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
    "column_sums = [sum(row[c] for row in my_list) for c in range(len(my_list[0]))]\n",
    "total_sum = sum(column_sums)\n",
    "print(column_sums, total_sum)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1f3a885",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Max value and its indices in 2D list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "37d62f37",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9 1 1\n"
     ]
    }
   ],
   "source": [
    "# Find max value and its indices in a 2d list\n",
    "my_list = [[1, 2, 3], [4, 9, 6], [7, 8, 5]]\n",
    "max_value = max([max(row) for row in my_list])\n",
    "for idx, row in enumerate(my_list):\n",
    "    if max_value in row:\n",
    "        max_row, max_col = idx, row.index(max_value)\n",
    "print(max_value, max_row, max_col)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cb559eb",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "source": [
    "### Max value and row containing it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f6b457f4",
   "metadata": {
    "tags": [
     "hide-output",
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9 [4, 9, 6]\n"
     ]
    }
   ],
   "source": [
    "# Find max value and the row containing it in a 2d list\n",
    "my_list = [[1, 2, 3], [4, 9, 6], [7, 8, 5]]\n",
    "rows_max = [max(row) for row in my_list]\n",
    "max_value = max(rows_max)\n",
    "max_row = my_list[rows_max.index(max_value)]\n",
    "print(max_value, max_row)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.13 (code-venv)",
   "language": "python",
   "name": "code-venv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
